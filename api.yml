AWSTemplateFormatVersion: 2010-09-09
Description: Serverless API boilerplate

Parameters:
  S3Key:
    Description: zip of the lambda
    Type: String

Resources:
  LambdaFnc:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 15
      FunctionName: !Sub ${AWS::StackName}
      Handler: src/index.router
      Runtime: nodejs8.10
      Code:
        S3Bucket: product-api
        S3Key: !Ref S3Key
      Role: !GetAtt LambdaRole.Arn

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: 2.0
        info:
          version: 1.0
          title: !Ref AWS::StackName
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          '/{proxy+}':

              x-amazon-apigateway-any-method:
                security:
                  - api_key: []
                produces:
                - application/json
                parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
                responses: {}
                x-amazon-apigateway-integration:
                  uri: 
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFnc.Arn}/invocations
                  httpMethod: POST
                  type: aws_proxy
              options:
                consumes:
                - application/json
                produces:
                - application/json
                responses:
                  '200':
                    description: 200 response
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: string
                      Access-Control-Allow-Methods:
                        type: string
                      Access-Control-Allow-Headers:
                        type: string
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: 200
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  passthroughBehavior: when_no_match
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  type: mock
          definitions:
            Empty:
              type: object
              title: Empty Schema
      Name: !Ref AWS::StackName

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      CacheClusterEnabled: false # costs money!
      StageName: stage
      Description: Stage
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref APIDeployment

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFnc
      Principal: apigateway.amazonaws.com

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - dynamodb:BatchGetItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: '*'
        #         Resouce: arn:aws:dynamodb:eu-west-1:327612306032:table/Products

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}
      Enabled: true
      StageKeys:
        - RestApiId:
            Ref: ApiGateway
          StageName: !Ref Stage

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      Description: Usage plan for api keys
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: !Ref Stage
      Quota:
        Limit: 5000
        Period: DAY
      Throttle:
        BurstLimit: 200
        RateLimit: 100

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # OptionsMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     AuthorizationType: NONE
  #     RestApiId:
  #       Ref: ApiGateway
  #     ResourceId:
  #       Ref: ApiGateway
  #     HttpMethod: OPTIONS
  #     Integration:
  #       IntegrationResponses:
  #       - StatusCode: 200
  #         ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #           method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,UPDATE,OPTIONS'"
  #           method.response.header.Access-Control-Allow-Origin: "'*'"
  #         ResponseTemplates:
  #           application/json: ''
  #       PassthroughBehavior: WHEN_NO_MATCH
  #       RequestTemplates:
  #         application/json: '{"statusCode": 200}'
  #       Type: MOCK
  #     MethodResponses:
  #     - StatusCode: 200
  #       ResponseModels:
  #         application/json: 'Empty'
  #       ResponseParameters:
  #           method.response.header.Access-Control-Allow-Headers: false
  #           method.response.header.Access-Control-Allow-Methods: false
  #           method.response.header.Access-Control-Allow-Origin: false
